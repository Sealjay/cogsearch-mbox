@page "/"
@using Microsoft.Extensions.Configuration
@using webapp.Models
@using Azure.Search.Documents.Models
@using Azure.Search.Documents
@using Azure.Search.Documents.Indexes
@using Azure

<div class="bg-white">
    <div class="max-w-7xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8 ">
        <div class="text-center">
            <h2 class="text-base font-semibold text-indigo-600 tracking-wide uppercase">Search your email</h2>
            <p class="mt-1 text-4xl font-extrabold text-gray-900 sm:text-5xl sm:tracking-tight lg:text-6xl">
                Cognitive Search
            </p>
            <div
                class="relative border border-gray-300 rounded-md px-3 py-2 shadow-sm focus-within:ring-1 focus-within:ring-indigo-600 focus-within:border-indigo-600">
                <label for="search"
                       class="absolute -top-2 left-2 -mt-px inline-block px-1 bg-white text-xs font-medium text-gray-900">
                    Search
                </label>
                <input type="text" name="name" id="name"
                       class="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm mb-8"
                       placeholder="What do you want to search for?"
                       @onchange="RunQueryAsync">
            </div>
            @if (SearchComplete)
            {
                @if (resultList != null)
                {
                    var results = resultList.GetResults().ToList();
                    <div class="bg-white shadow overflow-hidden sm:rounded-md">
                        <ul role="list" class="divide-y divide-gray-200">
                            @foreach (var t in results)
                            {
                                <li>
                                    <a href="#" class="block hover:bg-gray-50">
                                        <div class="px-4 py-4 sm:px-6">
                                            <div class="flex items-center justify-between">
                                                <p class="text-sm font-medium text-indigo-600 truncate">
                                                    <p>From @t.Document.MessageFrom</p>
                                                </p>
                                                <div class="ml-2 flex-shrink-0 flex">
                                                    <p class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                        <p>@t.Document.MessageSubject</p>
                                                    </p>
                                                </div>
                                            </div>
                                            <div class="px-4 py-4 sm:px-6">
                                                @t.Document.MessageContent
                                            </div>
                                            <div class="mt-2 sm:flex sm:justify-between">
                                                <div class="sm:flex">
                                                    <p class="flex items-center text-sm text-gray-500">
                                                        To @t.Document.MessageTo
                                                    </p>
                                                </div>
                                                <div class="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                                                    <!-- Heroicon name: solid/calendar -->
                                                    <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                                                    </svg>
                                                    <p>
                                                        <time>@t.Document.MessageDate</time>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                }
            }
            else if (SearchTerm != null)
            {
                <p>Searching...</p>
            }
        </div>
    </div>
</div>

@code {
    private SearchResults<Email> resultList;
    private string SearchTerm { get; set; }
    private bool SearchComplete { get; set; }
    private static SearchClient _searchClient;
    private static SearchIndexClient _indexClient;
    private static IConfigurationBuilder _builder;
    private static IConfigurationRoot _configuration;

    private void InitSearch()
    {
        _builder = new ConfigurationBuilder().AddJsonFile("appsettings.json");
        _configuration = _builder.Build();

        var searchServiceEndpoint = _configuration["SearchServiceEndpoint"];
        var queryApiKey = _configuration["SearchServiceQueryApiKey"];
        var searchIndexName = _configuration["SearchIndexName"];

        _indexClient = new SearchIndexClient(new Uri(searchServiceEndpoint), new AzureKeyCredential(queryApiKey));
        _searchClient = _indexClient.GetSearchClient(searchIndexName);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InitSearch();
        }
    }

    private async Task RunQueryAsync(ChangeEventArgs e)
    {
        SearchComplete = false;
        SearchTerm = e.Value.ToString();

        var options = new SearchOptions
        {
            IncludeTotalCount = true
        };

        options.Select.Add("MessageSubject");
        options.Select.Add("MessageContent");
        options.Select.Add("MessageTo");
        options.Select.Add("MessageFrom");
        options.Select.Add("MessageDate");
        resultList = await _searchClient.SearchAsync<Email>(SearchTerm, options).ConfigureAwait(false);
        SearchComplete = true;
    }

}